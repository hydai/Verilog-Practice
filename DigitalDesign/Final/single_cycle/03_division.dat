// Division A/B = C...D
//     R0: 0
//     R1: C
//     R2: A, D
//     R3: B
//     R4: done ?
//         欲計算 memory[1024] 與 memory[1025] 相除。
//         首先將 memory[1024] 存於 R2 (被除數)、memory[1025] 存於 R3 (除數)。
//         反覆將 R2 減 R3 ，每次相減後，將 R1 加一，直到 R2 小於 R3 為止。
//         最後將 R1 存至 memory[1026] (即為商數)，將 R2 存至
//         memory[1027] (即為餘數 )。
//
// Note: This version is only for your reference.  It may not be
// verified completely.  Please report any bug you find out.

// Code Segment starts at 0
@0
0100010_10000_00000__000010000000000  //          ADI  R16, R0, #1024
0010000_00010_10000__000000000000000  //          LD   R2, M[R16]
0100010_10001_00000__000010000000001  //          ADI  R17, R0, #1025
0010000_00011_10001__000000000000000  //          LD   R3, M[R17]
1100101_00100_00010_00011_0000000000  //   div:   SLT  R4, R2, R3
1001000_00000_00100__000000000000011  //          BNZ  R4, done (+3)
0000101_00010_00010_00011_0000000000  //          SUB  R2, R2, R3 
0100010_00001_00001__000000000000001  //          ADI  R1, R1, #1
1101000_00000_00000__111111111111011  //          JMP  div (-5)
0100010_10010_00000__000010000000010  //   done:  ADI  R18, R0, #1026
0100000_00000_10010_00001_0000000000  //          ST   M[R18], R1
0100010_10011_00000__000010000000011  //          ADI  R19, R0, #1027
0100000_00000_10011_00010_0000000000  //          ST   M[R19], R2

0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

// Data Segment starts at 1024 = 0x400h
@400
00000000_00000000_00000000_00010000   //  16
//11111111_11111111_11111111_11110000   //  -16
00000000_00000000_00000000_00000011   //  3
//11111111_11111111_11111111_11111101   //  -3
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

// 1792 = 0x700h
@700
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

/*
0000101_00001_00010_00011_0000000000  //   gcd:   SUB  R1, R2, R3
1100000_00000_00001__000000000000110  //          BZ   R1, done (+6)
1100101_00001_00010_00011_0000000000  //          SLT  R1, R2, R3
1001000_00000_00001__000000000000010  //          BNZ  R1, less (+2)
0000101_00010_00010_00011_0000000000  //          SUB  R2, R2, R3
1101000_00000_00000__111111111111010  //          JMP  gcd (-6)
0000101_00011_00011_00010_0000000000  //   less:  SUB  R3, R3, R2
1101000_00000_00000__111111111111000  //          JMP  gcd (-8)
*/
