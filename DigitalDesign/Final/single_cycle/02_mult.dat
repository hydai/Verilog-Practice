// Multiplication C = A*B
//     A: #1024
//     B: #1025
//     R0: 0
//     R1: C
//     R2: A
//     R3: B
//     R4: R2 pos or neg
//     R5: R3 pos or neg
//     R6: R4 & R5
//          欲計算 memory[1024] 與 memory[1025] 之乘積。
//          首先將 memory[1024] 存於 R2 (被乘數 )、memory[1025] 存於 R3 (乘數)，若 R3 不等於零，
//          則 R1 加 R2 ，並將 R3 減 1，重複此動作直到 ，重複此動作直到 R3 等於零為止。最後將 R1
//          存至 memory[1026]，即為 memory[1024] 與 memory[1025] 之乘積。
//          分別考慮 memory[1024] 與 memory[1025] 為 {正,正}、{正,負}、{負,正}、{負,負} 四種情況 。
//
// Note: This version is only for your reference.  It may not be
// verified completely.  Please report any bug you find out.


// Code Segment starts at 0
@0
0100010_10000_00000__000010000000000  //          ADI  R16, R0, #1024
0010000_00010_10000__000000000000000  //          LD   R2, M[R16]
0100010_10001_00000__000010000000001  //          ADI  R17, R0, #1025
0010000_00011_10001__000000000000000  //          LD   R3, M[R17]
1100000_00000_00010__000000000001100  //   zero:  BZ   R2, done (+12)   
1100000_00000_00011__000000000001011  //          BZ   R3, done (+11)
1100101_00100_00000_00010_0000000000  //   p/n:   SLT  R4, R0, R2 //R2 pos --> R4 = 1, R2 neg --> R4 = 0
1100101_00101_00000_00011_0000000000  //          SLT  R5, R0, R3 //R3 pos --> R4 = 1, R3 neg --> R4 = 0
0001000_00110_00100_00101_0000000000  //          AND  R6, R4, R5
1001000_00000_00110__000000000000100  //          BNZ  R6, mult  (+4)  //both R2 and R3 pos
1100000_00000_00101__000000000000001  //          BZ   R5, p<->n (+1)  //R3 neg
1100000_00000_00100__000000000000010  //          BZ   R4, mult  (+2)  //R2 neg, R3 pos
0000101_00010_00000_00010_0000000000  //   p<->n: SUB  R2, R0, R2 
0000101_00011_00000_00011_0000000000  //          SUB  R3, R0, R3  
0000010_00001_00001_00010_0000000000  //   mult:  ADD  R1, R1, R2
0100101_00011_00011__000000000000001  //          SBI  R3, R3, #1
1001000_00000_00011__111111111111101  //          BNZ  R3, mult (-3)
0100010_10010_00000__000010000000010  //   done:  ADI  R18, R0, #1026
0100000_00000_10010_00001_0000000000  //          ST   M[R18], R1

0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

// Data Segment starts at 1024 = 0x400h
@400
//0000000_00000_00000__000000000000000  //          NOP
//00000000_00000000_00000000_00010000   //  16
11111111_11111111_11111111_11110000   //  -16
//00000000_00000000_00000000_00000011   //  3
11111111_11111111_11111111_11111101   //  -3
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

// 1792 = 0x700h
@700
0000000_00000_00000__000000000000000  //          NOP
0000000_00000_00000__000000000000000  //          NOP

